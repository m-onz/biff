# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := isolated_vm
DEFS_Debug := \
	'-DNODE_GYP_MODULE_NAME=isolated_vm' \
	'-DUSING_UV_SHARED=1' \
	'-DUSING_V8_SHARED=1' \
	'-DV8_DEPRECATION_WARNINGS=1' \
	'-D_DARWIN_USE_64_BIT_INODE=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION' \
	'-DV8_IMMINENT_DEPRECATION_WARNINGS' \
	'-DDEBUG' \
	'-D_DEBUG' \
	'-DV8_ENABLE_CHECKS'

# Flags passed to all source files.
CFLAGS_Debug := \
	-O0 \
	-gdwarf-2 \
	-mmacosx-version-min=10.9 \
	-arch x86_64 \
	-Wall \
	-Wendif-labels \
	-W \
	-Wno-unused-parameter

# Flags passed to only C files.
CFLAGS_C_Debug := \
	-fno-strict-aliasing

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-std=c++14 \
	-stdlib=libc++ \
	-fno-threadsafe-statics \
	-fno-strict-aliasing

# Flags passed to only ObjC files.
CFLAGS_OBJC_Debug :=

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Debug :=

INCS_Debug := \
	-I/Users/mink/.node-gyp/8.11.3/include/node \
	-I/Users/mink/.node-gyp/8.11.3/src \
	-I/Users/mink/.node-gyp/8.11.3/deps/uv/include \
	-I/Users/mink/.node-gyp/8.11.3/deps/v8/include

DEFS_Release := \
	'-DNODE_GYP_MODULE_NAME=isolated_vm' \
	'-DUSING_UV_SHARED=1' \
	'-DUSING_V8_SHARED=1' \
	'-DV8_DEPRECATION_WARNINGS=1' \
	'-D_DARWIN_USE_64_BIT_INODE=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION'

# Flags passed to all source files.
CFLAGS_Release := \
	-O3 \
	-gdwarf-2 \
	-mmacosx-version-min=10.9 \
	-arch x86_64 \
	-Wall \
	-Wendif-labels \
	-W \
	-Wno-unused-parameter

# Flags passed to only C files.
CFLAGS_C_Release := \
	-fno-strict-aliasing \
	-Wno-deprecated-declarations

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-std=c++14 \
	-stdlib=libc++ \
	-fno-threadsafe-statics \
	-fno-strict-aliasing \
	-Wno-deprecated-declarations

# Flags passed to only ObjC files.
CFLAGS_OBJC_Release :=

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Release :=

INCS_Release := \
	-I/Users/mink/.node-gyp/8.11.3/include/node \
	-I/Users/mink/.node-gyp/8.11.3/src \
	-I/Users/mink/.node-gyp/8.11.3/deps/uv/include \
	-I/Users/mink/.node-gyp/8.11.3/deps/v8/include

OBJS := \
	$(obj).target/$(TARGET)/src/isolate/allocator.o \
	$(obj).target/$(TARGET)/src/isolate/class_handle.o \
	$(obj).target/$(TARGET)/src/isolate/environment.o \
	$(obj).target/$(TARGET)/src/isolate/holder.o \
	$(obj).target/$(TARGET)/src/isolate/inspector.o \
	$(obj).target/$(TARGET)/src/isolate/stack_trace.o \
	$(obj).target/$(TARGET)/src/isolate/three_phase_task.o \
	$(obj).target/$(TARGET)/src/context_handle.o \
	$(obj).target/$(TARGET)/src/external_copy.o \
	$(obj).target/$(TARGET)/src/external_copy_handle.o \
	$(obj).target/$(TARGET)/src/isolate.o \
	$(obj).target/$(TARGET)/src/isolate_handle.o \
	$(obj).target/$(TARGET)/src/lib_handle.o \
	$(obj).target/$(TARGET)/src/native_module_handle.o \
	$(obj).target/$(TARGET)/src/reference_handle.o \
	$(obj).target/$(TARGET)/src/script_handle.o \
	$(obj).target/$(TARGET)/src/module_handle.o \
	$(obj).target/$(TARGET)/src/session_handle.o \
	$(obj).target/$(TARGET)/src/transferable.o \
	$(obj).target/$(TARGET)/src/array_buffer_shim.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# Make sure our dependencies are built before any of us.
$(OBJS): | $(builddir)/nortti.a

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))
$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))
$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first \
	-mmacosx-version-min=10.9 \
	-arch x86_64 \
	-L$(builddir) \
	-stdlib=libc++

LIBTOOLFLAGS_Debug := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first

LDFLAGS_Release := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first \
	-mmacosx-version-min=10.9 \
	-arch x86_64 \
	-L$(builddir) \
	-stdlib=libc++

LIBTOOLFLAGS_Release := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first

LIBS :=

$(builddir)/isolated_vm.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(builddir)/isolated_vm.node: LIBS := $(LIBS)
$(builddir)/isolated_vm.node: GYP_LIBTOOLFLAGS := $(LIBTOOLFLAGS_$(BUILDTYPE))
$(builddir)/isolated_vm.node: TOOLSET := $(TOOLSET)
$(builddir)/isolated_vm.node: $(OBJS) $(builddir)/nortti.a FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(builddir)/isolated_vm.node
# Add target alias
.PHONY: isolated_vm
isolated_vm: $(builddir)/isolated_vm.node

# Short alias for building this executable.
.PHONY: isolated_vm.node
isolated_vm.node: $(builddir)/isolated_vm.node

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/isolated_vm.node

